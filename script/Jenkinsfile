pipeline {
    agent {
        label 'kdw-jumphost'
    }
    environment {
        // 이미지 이름과 버전(빌드 번호 활용)
        IMAGE_NAME = "my-spring-app"
        VERSION = "1.0.${BUILD_NUMBER}"
        REGISTRY   = "harbor.tanzu.lab"
        PROJECT    = "cicd-poc"
    }
    stages {
        stage('Checkout') {
            steps {
                // 소스코드 체크아웃 (SCM 설정에 따라 자동 구성)
                checkout scm
            }
        }
        stage('Build with Maven') {
            steps {
                // Maven Wrapper를 사용해 빌드 (테스트 건너뛰기)
                sh 'chmod +x mvnw'
                sh './mvnw clean package -DskipTests'
            }
        }
        stage('Archive Artifact') {
            steps {
                // target 폴더 내의 *.jar 파일 아카이브 (빌드 결과 확인용)
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
        stage('Build Docker Image') {
            steps {
                // Dockerfile이 프로젝트 루트에 존재하며, 빌드된 jar 파일을 이용해 이미지를 빌드
                sh "docker build -t ${IMAGE_NAME}:${VERSION} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                // Jenkins Credential ID: 'harbor-credentials' (username/password 형태)
                withCredentials([usernamePassword(credentialsId: 'harbor-credentials', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    sh """
                    docker login ${REGISTRY} -u ${HARBOR_USER} -p ${HARBOR_PASS}
                    
                    # 태그 변경: local_image -> harbor.tanzu.lab/cicd-poc/image_name:version
                    docker tag ${IMAGE_NAME}:${VERSION} ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:${VERSION}
                    
                    # Harbor에 푸시
                    docker push ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:${VERSION}
                    
                    # 필요 시 로그아웃
                    docker logout ${REGISTRY}
                    """
                }
            }
        }


    }
    post {
        always {
            // 빌드 후 작업 공간 정리
            cleanWs()
        }
    }
}
